CCS PCM C Compiler, Version 5.015, 5967               04-Jan-21 02:42

               Filename:   C:\Users\enist\OneDrive\Belgeler\CCS C Projects\Slave_LCD_Output\Slave_LCD_Output.lst

               ROM used:   400 words (5%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           36 (10%) worst case
               Stack used: 8 locations (3 in main + 5 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   15C
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.3
001A:  GOTO   01D
001B:  BTFSC  0C.3
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   0E0
.................... #include <Slave_LCD_Output.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
00A0:  MOVLW  36
00A1:  MOVWF  04
00A2:  BCF    03.7
00A3:  MOVF   00,W
00A4:  BTFSC  03.2
00A5:  GOTO   0B3
00A6:  MOVLW  06
00A7:  MOVWF  78
00A8:  CLRF   77
00A9:  DECFSZ 77,F
00AA:  GOTO   0A9
00AB:  DECFSZ 78,F
00AC:  GOTO   0A8
00AD:  MOVLW  7B
00AE:  MOVWF  77
00AF:  DECFSZ 77,F
00B0:  GOTO   0AF
00B1:  DECFSZ 00,F
00B2:  GOTO   0A6
00B3:  RETURN
....................  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0031:  MOVLW  0F
0032:  BSF    03.5
0033:  ANDWF  08,W
0034:  IORLW  F0
0035:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0036:  BCF    03.5
0037:  BSF    08.2
....................    delay_cycles(1); 
0038:  NOP
....................    lcd_output_enable(1); 
0039:  BSF    08.0
....................    delay_cycles(1); 
003A:  NOP
....................    high = lcd_read_nibble(); 
*
0040:  MOVF   78,W
0041:  MOVWF  3D
....................        
....................    lcd_output_enable(0); 
0042:  BCF    08.0
....................    delay_cycles(1); 
0043:  NOP
....................    lcd_output_enable(1); 
0044:  BSF    08.0
....................    delay_us(1); 
0045:  GOTO   046
0046:  GOTO   047
0047:  NOP
....................    low = lcd_read_nibble(); 
*
004D:  MOVF   78,W
004E:  MOVWF  3C
....................        
....................    lcd_output_enable(0); 
004F:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0050:  MOVLW  0F
0051:  BSF    03.5
0052:  ANDWF  08,W
0053:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0054:  BCF    03.5
0055:  SWAPF  3D,W
0056:  MOVWF  77
0057:  MOVLW  F0
0058:  ANDWF  77,F
0059:  MOVF   77,W
005A:  IORWF  3C,W
005B:  MOVWF  78
005C:  RETURN
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
003B:  MOVF   08,W
003C:  MOVWF  77
003D:  SWAPF  08,W
003E:  ANDLW  0F
003F:  MOVWF  78
*
0048:  MOVF   08,W
0049:  MOVWF  77
004A:  SWAPF  08,W
004B:  ANDLW  0F
004C:  MOVWF  78
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
005D:  SWAPF  3D,W
005E:  ANDLW  F0
005F:  MOVWF  77
0060:  MOVLW  0F
0061:  ANDWF  08,W
0062:  IORWF  77,W
0063:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0064:  NOP
....................    lcd_output_enable(1); 
0065:  BSF    08.0
....................    delay_us(2); 
0066:  MOVLW  02
0067:  MOVWF  77
0068:  DECFSZ 77,F
0069:  GOTO   068
006A:  GOTO   06B
006B:  NOP
....................    lcd_output_enable(0); 
006C:  BCF    08.0
006D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
006E:  BSF    03.5
006F:  BCF    08.0
....................    lcd_rs_tris(); 
0070:  BCF    08.1
....................    lcd_rw_tris(); 
0071:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0072:  BCF    03.5
0073:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0074:  CALL   031
0075:  MOVF   78,W
0076:  MOVWF  3C
0077:  BTFSC  3C.7
0078:  GOTO   074
....................    lcd_output_rs(address); 
0079:  BTFSS  3A.0
007A:  BCF    08.1
007B:  BTFSC  3A.0
007C:  BSF    08.1
....................    delay_cycles(1); 
007D:  NOP
....................    lcd_output_rw(0); 
007E:  BCF    08.2
....................    delay_cycles(1); 
007F:  NOP
....................    lcd_output_enable(0); 
0080:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0081:  SWAPF  3B,W
0082:  MOVWF  3C
0083:  MOVLW  0F
0084:  ANDWF  3C,F
0085:  MOVF   3C,W
0086:  MOVWF  3D
0087:  CALL   05D
....................    lcd_send_nibble(n & 0xf); 
0088:  MOVF   3B,W
0089:  ANDLW  0F
008A:  MOVWF  3C
008B:  MOVWF  3D
008C:  CALL   05D
008D:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
*
00FA:  MOVLW  28
00FB:  MOVWF  2B
00FC:  MOVLW  0C
00FD:  MOVWF  2C
00FE:  MOVLW  01
00FF:  MOVWF  2D
0100:  MOVLW  06
0101:  MOVWF  2E
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0102:  BCF    08.0
....................    lcd_output_rs(0); 
0103:  BCF    08.1
....................    lcd_output_rw(0); 
0104:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0105:  MOVLW  0F
0106:  BSF    03.5
0107:  ANDWF  08,W
0108:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0109:  BCF    08.0
....................    lcd_rs_tris(); 
010A:  BCF    08.1
....................    lcd_rw_tris(); 
010B:  BCF    08.2
010C:  BCF    03.5
010D:  CLRF   27
010E:  BTFSC  0B.7
010F:  BSF    27.7
0110:  BCF    0B.7
....................  #endif 
....................      
....................    delay_ms(15); 
0111:  MOVLW  0F
0112:  MOVWF  36
0113:  CALL   0A0
0114:  BTFSC  27.7
0115:  BSF    0B.7
....................    for(i=1;i<=3;++i) 
0116:  MOVLW  01
0117:  MOVWF  2A
0118:  MOVF   2A,W
0119:  SUBLW  03
011A:  BTFSS  03.0
011B:  GOTO   130
011C:  CLRF   27
011D:  BTFSC  0B.7
011E:  BSF    27.7
011F:  BCF    0B.7
....................    { 
....................        lcd_send_nibble(3); 
0120:  MOVLW  03
0121:  MOVWF  3D
0122:  CALL   05D
0123:  BTFSC  27.7
0124:  BSF    0B.7
0125:  CLRF   27
0126:  BTFSC  0B.7
0127:  BSF    27.7
0128:  BCF    0B.7
....................        delay_ms(5); 
0129:  MOVLW  05
012A:  MOVWF  36
012B:  CALL   0A0
012C:  BTFSC  27.7
012D:  BSF    0B.7
012E:  INCF   2A,F
012F:  GOTO   118
0130:  CLRF   27
0131:  BTFSC  0B.7
0132:  BSF    27.7
0133:  BCF    0B.7
....................    } 
....................     
....................    lcd_send_nibble(2); 
0134:  MOVLW  02
0135:  MOVWF  3D
0136:  CALL   05D
0137:  BTFSC  27.7
0138:  BSF    0B.7
0139:  CLRF   27
013A:  BTFSC  0B.7
013B:  BSF    27.7
013C:  BCF    0B.7
....................    delay_ms(5); 
013D:  MOVLW  05
013E:  MOVWF  36
013F:  CALL   0A0
0140:  BTFSC  27.7
0141:  BSF    0B.7
....................    for(i=0;i<=3;++i) 
0142:  CLRF   2A
0143:  MOVF   2A,W
0144:  SUBLW  03
0145:  BTFSS  03.0
0146:  GOTO   159
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0147:  MOVLW  2B
0148:  ADDWF  2A,W
0149:  MOVWF  04
014A:  BCF    03.7
014B:  MOVF   00,W
014C:  MOVWF  2F
014D:  CLRF   27
014E:  BTFSC  0B.7
014F:  BSF    27.7
0150:  BCF    0B.7
0151:  CLRF   3A
0152:  MOVF   2F,W
0153:  MOVWF  3B
0154:  CALL   06E
0155:  BTFSC  27.7
0156:  BSF    0B.7
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0157:  INCF   2A,F
0158:  GOTO   143
0159:  BCF    0A.3
015A:  BCF    0A.4
015B:  GOTO   175 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
008E:  DECFSZ 37,W
008F:  GOTO   091
0090:  GOTO   094
....................       address=LCD_LINE_TWO; 
0091:  MOVLW  40
0092:  MOVWF  38
0093:  GOTO   095
....................    else 
....................       address=0; 
0094:  CLRF   38
....................       
....................    address+=x-1; 
0095:  MOVLW  01
0096:  SUBWF  36,W
0097:  ADDWF  38,F
....................    lcd_send_byte(0,0x80|address); 
0098:  MOVF   38,W
0099:  IORLW  80
009A:  MOVWF  39
009B:  CLRF   3A
009C:  MOVF   39,W
009D:  MOVWF  3B
009E:  CALL   06E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
009F:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
00B4:  MOVF   35,W
00B5:  XORLW  07
00B6:  BTFSC  03.2
00B7:  GOTO   0C2
00B8:  XORLW  0B
00B9:  BTFSC  03.2
00BA:  GOTO   0C7
00BB:  XORLW  06
00BC:  BTFSC  03.2
00BD:  GOTO   0CF
00BE:  XORLW  02
00BF:  BTFSC  03.2
00C0:  GOTO   0D5
00C1:  GOTO   0DA
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00C2:  MOVLW  01
00C3:  MOVWF  36
00C4:  MOVWF  37
00C5:  CALL   08E
00C6:  GOTO   0DF
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00C7:  CLRF   3A
00C8:  MOVLW  01
00C9:  MOVWF  3B
00CA:  CALL   06E
....................                      delay_ms(2); 
00CB:  MOVLW  02
00CC:  MOVWF  36
00CD:  CALL   0A0
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00CE:  GOTO   0DF
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00CF:  MOVLW  01
00D0:  MOVWF  36
00D1:  MOVLW  02
00D2:  MOVWF  37
00D3:  CALL   08E
00D4:  GOTO   0DF
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00D5:  CLRF   3A
00D6:  MOVLW  10
00D7:  MOVWF  3B
00D8:  CALL   06E
00D9:  GOTO   0DF
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00DA:  MOVLW  01
00DB:  MOVWF  3A
00DC:  MOVF   35,W
00DD:  MOVWF  3B
00DE:  CALL   06E
....................      #endif 
....................    } 
00DF:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... char deger; 
.................... #int_SSP 
.................... void SSP_Kesmesi() 
.................... { 
....................       deger = spi_read(); 
00E0:  BSF    03.5
00E1:  RRF    14,W
00E2:  BTFSS  03.0
00E3:  GOTO   0E1
00E4:  BCF    03.5
00E5:  MOVF   13,W
00E6:  MOVWF  28
....................       // Eger kapatma komutu ise 
....................       if ( deger == 'A' ) 
00E7:  MOVF   28,W
00E8:  SUBLW  41
00E9:  BTFSS  03.2
00EA:  GOTO   0F3
....................       { 
....................          lcd_putc( '\f' ); 
00EB:  MOVLW  0C
00EC:  MOVWF  35
00ED:  CALL   0B4
....................          output_d( 0x00 ); 
00EE:  BSF    03.5
00EF:  CLRF   08
00F0:  BCF    03.5
00F1:  CLRF   08
....................       } 
00F2:  GOTO   0F6
....................       // Eger kapatma komutu degil ise gelen degeri bastir 
....................       else 
....................          printf(lcd_putc, "%c", deger);    
00F3:  MOVF   28,W
00F4:  MOVWF  35
00F5:  CALL   0B4
00F6:  BCF    0C.3
00F7:  BCF    0A.3
00F8:  BCF    0A.4
00F9:  GOTO   01D
.................... } 
.................... void main() 
*
015C:  MOVF   03,W
015D:  ANDLW  1F
015E:  MOVWF  03
015F:  MOVLW  FF
0160:  MOVWF  29
0161:  BSF    03.5
0162:  BSF    1F.0
0163:  BSF    1F.1
0164:  BSF    1F.2
0165:  BCF    1F.3
0166:  MOVLW  07
0167:  MOVWF  1C
0168:  BCF    03.7
.................... { 
....................    // Analog pinini digital input olarak tanittim 
....................    setup_adc_ports(0xFF); 
0169:  BSF    1F.0
016A:  BSF    1F.1
016B:  BSF    1F.2
016C:  BSF    1F.3
....................    set_adc_channel(0x00); 
016D:  MOVLW  00
016E:  MOVWF  78
016F:  BCF    03.5
0170:  MOVF   1F,W
0171:  ANDLW  C7
0172:  IORWF  78,W
0173:  MOVWF  1F
....................    // LCD tanimladim 
....................    lcd_init(); 
0174:  GOTO   0FA
....................    // Slave oldugu icin CLK_DIV_DISABLED 
....................    setup_spi(SPI_SLAVE|SPI_L_TO_H| SPI_SS_DISABLED); 
0175:  BCF    14.5
0176:  BCF    29.5
0177:  MOVF   29,W
0178:  BSF    03.5
0179:  MOVWF  07
017A:  BCF    03.5
017B:  BSF    29.4
017C:  MOVF   29,W
017D:  BSF    03.5
017E:  MOVWF  07
017F:  BCF    03.5
0180:  BSF    29.3
0181:  MOVF   29,W
0182:  BSF    03.5
0183:  MOVWF  07
0184:  MOVLW  25
0185:  BCF    03.5
0186:  MOVWF  14
0187:  MOVLW  00
0188:  BSF    03.5
0189:  MOVWF  14
....................    // Kesmeyi aktif hale getirdim 
....................    enable_interrupts(INT_SSP); 
018A:  BSF    0C.3
....................    enable_interrupts(GLOBAL); 
018B:  MOVLW  C0
018C:  BCF    03.5
018D:  IORWF  0B,F
....................     
....................    while(TRUE); 
018E:  GOTO   18E
....................       
.................... } 
018F:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
