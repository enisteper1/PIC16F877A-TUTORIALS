CCS PCM C Compiler, Version 5.015, 5967               03-Feb-21 17:46

               Filename:   D:\PIC16F877A-TUTORIALS\Servo_Control\Servo_Motor_Control\proje.lst

               ROM used:   630 words (8%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           20 (5%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   209
0003:  NOP
.................... #include <proje.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 43,36
0005:  DATA EF,39
0006:  DATA 65,32
0007:  DATA 21,00
0008:  DATA 8C,27
0009:  DATA F0,32
000A:  DATA EE,10
000B:  DATA 00,01
000C:  DATA 8C,21
000D:  DATA EC,37
000E:  DATA F3,32
000F:  DATA E4,10
0010:  DATA 00,00
*
0168:  MOVF   0B,W
0169:  MOVWF  21
016A:  BCF    0B.7
016B:  BSF    03.5
016C:  BSF    03.6
016D:  BSF    0C.7
016E:  BSF    0C.0
016F:  NOP
0170:  NOP
0171:  BCF    03.5
0172:  BCF    03.6
0173:  BTFSC  21.7
0174:  BSF    0B.7
0175:  BSF    03.6
0176:  MOVF   0C,W
0177:  ANDLW  7F
0178:  BTFSC  03.2
0179:  GOTO   1BC
017A:  BCF    03.6
017B:  MOVWF  21
017C:  BSF    03.6
017D:  MOVF   0D,W
017E:  BCF    03.6
017F:  MOVWF  22
0180:  BSF    03.6
0181:  MOVF   0F,W
0182:  BCF    03.6
0183:  MOVWF  23
0184:  MOVF   21,W
0185:  MOVWF  24
0186:  CALL   13C
0187:  MOVF   22,W
0188:  BSF    03.6
0189:  MOVWF  0D
018A:  BCF    03.6
018B:  MOVF   23,W
018C:  BSF    03.6
018D:  MOVWF  0F
018E:  BCF    03.6
018F:  MOVF   0B,W
0190:  MOVWF  24
0191:  BCF    0B.7
0192:  BSF    03.5
0193:  BSF    03.6
0194:  BSF    0C.7
0195:  BSF    0C.0
0196:  NOP
0197:  NOP
0198:  BCF    03.5
0199:  BCF    03.6
019A:  BTFSC  24.7
019B:  BSF    0B.7
019C:  BSF    03.6
019D:  RLF    0C,W
019E:  RLF    0E,W
019F:  ANDLW  7F
01A0:  BTFSC  03.2
01A1:  GOTO   1BC
01A2:  BCF    03.6
01A3:  MOVWF  21
01A4:  BSF    03.6
01A5:  MOVF   0D,W
01A6:  BCF    03.6
01A7:  MOVWF  22
01A8:  BSF    03.6
01A9:  MOVF   0F,W
01AA:  BCF    03.6
01AB:  MOVWF  23
01AC:  MOVF   21,W
01AD:  MOVWF  24
01AE:  CALL   13C
01AF:  MOVF   22,W
01B0:  BSF    03.6
01B1:  MOVWF  0D
01B2:  BCF    03.6
01B3:  MOVF   23,W
01B4:  BSF    03.6
01B5:  MOVWF  0F
01B6:  INCF   0D,F
01B7:  BTFSC  03.2
01B8:  INCF   0F,F
01B9:  BCF    03.6
01BA:  GOTO   168
01BB:  BSF    03.6
01BC:  BCF    03.6
01BD:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP 
.................... #FUSES PUT                	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0011:  MOVLW  26
0012:  MOVWF  04
0013:  BCF    03.7
0014:  MOVF   00,W
0015:  BTFSC  03.2
0016:  GOTO   024
0017:  MOVLW  06
0018:  MOVWF  78
0019:  CLRF   77
001A:  DECFSZ 77,F
001B:  GOTO   01A
001C:  DECFSZ 78,F
001D:  GOTO   019
001E:  MOVLW  7B
001F:  MOVWF  77
0020:  DECFSZ 77,F
0021:  GOTO   020
0022:  DECFSZ 00,F
0023:  GOTO   017
0024:  RETURN
*
01BE:  MOVLW  03
01BF:  SUBWF  22,F
01C0:  BTFSS  03.0
01C1:  GOTO   1CC
01C2:  MOVLW  22
01C3:  MOVWF  04
01C4:  BCF    03.7
01C5:  MOVF   00,W
01C6:  BTFSC  03.2
01C7:  GOTO   1CC
01C8:  GOTO   1CA
01C9:  GOTO   1CA
01CA:  DECFSZ 00,F
01CB:  GOTO   1C9
01CC:  RETURN
....................  
....................  
.................... #define LCD_RS_PIN PIN_B0 
.................... #define LCD_RW_PIN PIN_B1 
.................... #define LCD_ENABLE_PIN PIN_B2 
.................... #define LCD_DATA4 PIN_B3 
.................... #define LCD_DATA5 PIN_B4 
.................... #define LCD_DATA6 PIN_B5 
.................... #define LCD_DATA7 PIN_B6 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
008E:  BSF    06.3
....................    output_float(LCD_DATA5); 
008F:  BSF    06.4
....................    output_float(LCD_DATA6); 
0090:  BSF    06.5
....................    output_float(LCD_DATA7); 
0091:  BSF    06.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0092:  BCF    03.5
0093:  BSF    06.1
0094:  BSF    03.5
0095:  BCF    06.1
....................    delay_cycles(1); 
0096:  NOP
....................    lcd_output_enable(1); 
0097:  BCF    03.5
0098:  BSF    06.2
0099:  BSF    03.5
009A:  BCF    06.2
....................    delay_cycles(1); 
009B:  NOP
....................    high = lcd_read_nibble(); 
009C:  BCF    03.5
009D:  CALL   055
009E:  MOVF   78,W
009F:  MOVWF  2C
....................        
....................    lcd_output_enable(0); 
00A0:  BCF    06.2
00A1:  BSF    03.5
00A2:  BCF    06.2
....................    delay_cycles(1); 
00A3:  NOP
....................    lcd_output_enable(1); 
00A4:  BCF    03.5
00A5:  BSF    06.2
00A6:  BSF    03.5
00A7:  BCF    06.2
....................    delay_us(1); 
00A8:  GOTO   0A9
00A9:  GOTO   0AA
00AA:  NOP
....................    low = lcd_read_nibble(); 
00AB:  BCF    03.5
00AC:  CALL   055
00AD:  MOVF   78,W
00AE:  MOVWF  2B
....................        
....................    lcd_output_enable(0); 
00AF:  BCF    06.2
00B0:  BSF    03.5
00B1:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B2:  BCF    06.3
....................    output_drive(LCD_DATA5); 
00B3:  BCF    06.4
....................    output_drive(LCD_DATA6); 
00B4:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00B5:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B6:  BCF    03.5
00B7:  SWAPF  2C,W
00B8:  MOVWF  77
00B9:  MOVLW  F0
00BA:  ANDWF  77,F
00BB:  MOVF   77,W
00BC:  IORWF  2B,W
00BD:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0055:  CLRF   2D
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0056:  BSF    03.5
0057:  BSF    06.3
0058:  MOVLW  00
0059:  BCF    03.5
005A:  BTFSC  06.3
005B:  MOVLW  01
005C:  IORWF  2D,F
....................    n |= input(LCD_DATA5) << 1; 
005D:  BSF    03.5
005E:  BSF    06.4
005F:  MOVLW  00
0060:  BCF    03.5
0061:  BTFSC  06.4
0062:  MOVLW  01
0063:  MOVWF  77
0064:  BCF    03.0
0065:  RLF    77,F
0066:  MOVF   77,W
0067:  IORWF  2D,F
....................    n |= input(LCD_DATA6) << 2; 
0068:  BSF    03.5
0069:  BSF    06.5
006A:  MOVLW  00
006B:  BCF    03.5
006C:  BTFSC  06.5
006D:  MOVLW  01
006E:  MOVWF  77
006F:  RLF    77,F
0070:  RLF    77,F
0071:  MOVLW  FC
0072:  ANDWF  77,F
0073:  MOVF   77,W
0074:  IORWF  2D,F
....................    n |= input(LCD_DATA7) << 3; 
0075:  BSF    03.5
0076:  BSF    06.6
0077:  MOVLW  00
0078:  BCF    03.5
0079:  BTFSC  06.6
007A:  MOVLW  01
007B:  MOVWF  77
007C:  RLF    77,F
007D:  RLF    77,F
007E:  RLF    77,F
007F:  MOVLW  F8
0080:  ANDWF  77,F
0081:  MOVF   77,W
0082:  IORWF  2D,F
....................     
....................    return(n); 
0083:  MOVF   2D,W
0084:  MOVWF  78
....................   #else 
0085:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0025:  BTFSC  2C.0
0026:  GOTO   029
0027:  BCF    06.3
0028:  GOTO   02A
0029:  BSF    06.3
002A:  BSF    03.5
002B:  BCF    06.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
002C:  BCF    03.5
002D:  BTFSC  2C.1
002E:  GOTO   031
002F:  BCF    06.4
0030:  GOTO   032
0031:  BSF    06.4
0032:  BSF    03.5
0033:  BCF    06.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0034:  BCF    03.5
0035:  BTFSC  2C.2
0036:  GOTO   039
0037:  BCF    06.5
0038:  GOTO   03A
0039:  BSF    06.5
003A:  BSF    03.5
003B:  BCF    06.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
003C:  BCF    03.5
003D:  BTFSC  2C.3
003E:  GOTO   041
003F:  BCF    06.6
0040:  GOTO   042
0041:  BSF    06.6
0042:  BSF    03.5
0043:  BCF    06.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0044:  NOP
....................    lcd_output_enable(1); 
0045:  BCF    03.5
0046:  BSF    06.2
0047:  BSF    03.5
0048:  BCF    06.2
....................    delay_us(2); 
0049:  MOVLW  02
004A:  MOVWF  77
004B:  DECFSZ 77,F
004C:  GOTO   04B
004D:  GOTO   04E
004E:  NOP
....................    lcd_output_enable(0); 
004F:  BCF    03.5
0050:  BCF    06.2
0051:  BSF    03.5
0052:  BCF    06.2
0053:  BCF    03.5
0054:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0086:  BSF    03.5
0087:  BCF    06.2
....................    lcd_rs_tris(); 
0088:  BCF    06.0
....................    lcd_rw_tris(); 
0089:  BCF    06.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
008A:  BCF    03.5
008B:  BCF    06.0
008C:  BSF    03.5
008D:  BCF    06.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00BE:  MOVF   78,W
00BF:  MOVWF  2B
00C0:  BTFSS  2B.7
00C1:  GOTO   0C4
00C2:  BSF    03.5
00C3:  GOTO   08E
....................    lcd_output_rs(address); 
00C4:  MOVF   29,F
00C5:  BTFSS  03.2
00C6:  GOTO   0C9
00C7:  BCF    06.0
00C8:  GOTO   0CA
00C9:  BSF    06.0
00CA:  BSF    03.5
00CB:  BCF    06.0
....................    delay_cycles(1); 
00CC:  NOP
....................    lcd_output_rw(0); 
00CD:  BCF    03.5
00CE:  BCF    06.1
00CF:  BSF    03.5
00D0:  BCF    06.1
....................    delay_cycles(1); 
00D1:  NOP
....................    lcd_output_enable(0); 
00D2:  BCF    03.5
00D3:  BCF    06.2
00D4:  BSF    03.5
00D5:  BCF    06.2
....................    lcd_send_nibble(n >> 4); 
00D6:  BCF    03.5
00D7:  SWAPF  2A,W
00D8:  MOVWF  2B
00D9:  MOVLW  0F
00DA:  ANDWF  2B,F
00DB:  MOVF   2B,W
00DC:  MOVWF  2C
00DD:  CALL   025
....................    lcd_send_nibble(n & 0xf); 
00DE:  MOVF   2A,W
00DF:  ANDLW  0F
00E0:  MOVWF  2B
00E1:  MOVWF  2C
00E2:  CALL   025
00E3:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00E4:  MOVLW  28
00E5:  MOVWF  22
00E6:  MOVLW  0C
00E7:  MOVWF  23
00E8:  MOVLW  01
00E9:  MOVWF  24
00EA:  MOVLW  06
00EB:  MOVWF  25
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00EC:  BCF    06.2
00ED:  BSF    03.5
00EE:  BCF    06.2
....................    lcd_output_rs(0); 
00EF:  BCF    03.5
00F0:  BCF    06.0
00F1:  BSF    03.5
00F2:  BCF    06.0
....................    lcd_output_rw(0); 
00F3:  BCF    03.5
00F4:  BCF    06.1
00F5:  BSF    03.5
00F6:  BCF    06.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F7:  BCF    06.3
....................    output_drive(LCD_DATA5); 
00F8:  BCF    06.4
....................    output_drive(LCD_DATA6); 
00F9:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00FA:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00FB:  BCF    06.2
....................    lcd_rs_tris(); 
00FC:  BCF    06.0
....................    lcd_rw_tris(); 
00FD:  BCF    06.1
....................  #endif 
....................      
....................    delay_ms(15); 
00FE:  MOVLW  0F
00FF:  BCF    03.5
0100:  MOVWF  26
0101:  CALL   011
....................    for(i=1;i<=3;++i) 
0102:  MOVLW  01
0103:  MOVWF  21
0104:  MOVF   21,W
0105:  SUBLW  03
0106:  BTFSS  03.0
0107:  GOTO   110
....................    { 
....................        lcd_send_nibble(3); 
0108:  MOVLW  03
0109:  MOVWF  2C
010A:  CALL   025
....................        delay_ms(5); 
010B:  MOVLW  05
010C:  MOVWF  26
010D:  CALL   011
010E:  INCF   21,F
010F:  GOTO   104
....................    } 
....................     
....................    lcd_send_nibble(2); 
0110:  MOVLW  02
0111:  MOVWF  2C
0112:  CALL   025
....................    delay_ms(5); 
0113:  MOVLW  05
0114:  MOVWF  26
0115:  CALL   011
....................    for(i=0;i<=3;++i) 
0116:  CLRF   21
0117:  MOVF   21,W
0118:  SUBLW  03
0119:  BTFSS  03.0
011A:  GOTO   127
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
011B:  MOVLW  22
011C:  ADDWF  21,W
011D:  MOVWF  04
011E:  BCF    03.7
011F:  MOVF   00,W
0120:  MOVWF  26
0121:  CLRF   29
0122:  MOVF   26,W
0123:  MOVWF  2A
0124:  CALL   086
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0125:  INCF   21,F
0126:  GOTO   117
0127:  BCF    0A.3
0128:  BCF    0A.4
0129:  GOTO   22D (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
012A:  DECFSZ 26,W
012B:  GOTO   12D
012C:  GOTO   130
....................       address=LCD_LINE_TWO; 
012D:  MOVLW  40
012E:  MOVWF  27
012F:  GOTO   131
....................    else 
....................       address=0; 
0130:  CLRF   27
....................       
....................    address+=x-1; 
0131:  MOVLW  01
0132:  SUBWF  25,W
0133:  ADDWF  27,F
....................    lcd_send_byte(0,0x80|address); 
0134:  MOVF   27,W
0135:  IORLW  80
0136:  MOVWF  28
0137:  CLRF   29
0138:  MOVF   28,W
0139:  MOVWF  2A
013A:  CALL   086
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
013B:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
013C:  MOVF   24,W
013D:  XORLW  07
013E:  BTFSC  03.2
013F:  GOTO   14A
0140:  XORLW  0B
0141:  BTFSC  03.2
0142:  GOTO   14F
0143:  XORLW  06
0144:  BTFSC  03.2
0145:  GOTO   157
0146:  XORLW  02
0147:  BTFSC  03.2
0148:  GOTO   15D
0149:  GOTO   162
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
014A:  MOVLW  01
014B:  MOVWF  25
014C:  MOVWF  26
014D:  CALL   12A
014E:  GOTO   167
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
014F:  CLRF   29
0150:  MOVLW  01
0151:  MOVWF  2A
0152:  CALL   086
....................                      delay_ms(2); 
0153:  MOVLW  02
0154:  MOVWF  26
0155:  CALL   011
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0156:  GOTO   167
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0157:  MOVLW  01
0158:  MOVWF  25
0159:  MOVLW  02
015A:  MOVWF  26
015B:  CALL   12A
015C:  GOTO   167
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
015D:  CLRF   29
015E:  MOVLW  10
015F:  MOVWF  2A
0160:  CALL   086
0161:  GOTO   167
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0162:  MOVLW  01
0163:  MOVWF  29
0164:  MOVF   24,W
0165:  MOVWF  2A
0166:  CALL   086
....................      #endif 
....................    } 
0167:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOPUT, NOPROTECT, HS, NOWRT, NOBROWNOUT, NOCPD, NOLVP, NOWDT 
....................  
.................... #define SERVO_PIN PIN_D7 
....................  
.................... #define GREEN_LED PIN_D0 
.................... #define RED_LED PIN_D1 
....................  
.................... #define SENSOR_1 PIN_C1 
.................... #define SENSOR_2 PIN_C4 
....................  
....................  
....................  
.................... void Servo_High() 
.................... { 
....................    output_high(SERVO_PIN); 
*
01EA:  BSF    03.5
01EB:  BCF    08.7
01EC:  BCF    03.5
01ED:  BSF    08.7
....................    delay_us(550 + 2000); 
01EE:  MOVLW  02
01EF:  MOVWF  26
01F0:  CALL   011
01F1:  MOVLW  05
01F2:  MOVWF  21
01F3:  MOVLW  6D
01F4:  MOVWF  22
01F5:  CALL   1BE
01F6:  DECFSZ 21,F
01F7:  GOTO   1F3
....................    output_low(SERVO_PIN); 
01F8:  BSF    03.5
01F9:  BCF    08.7
01FA:  BCF    03.5
01FB:  BCF    08.7
....................    delay_us(19450 - 2000); 
01FC:  MOVLW  11
01FD:  MOVWF  26
01FE:  CALL   011
01FF:  MOVLW  02
0200:  MOVWF  21
0201:  MOVLW  E0
0202:  MOVWF  22
0203:  CALL   1BE
0204:  DECFSZ 21,F
0205:  GOTO   201
0206:  BCF    0A.3
0207:  BCF    0A.4
0208:  GOTO   247 (RETURN)
.................... } 
....................  
....................  
.................... void Servo_Low() 
.................... { 
....................    output_high(SERVO_PIN); 
*
01CD:  BSF    03.5
01CE:  BCF    08.7
01CF:  BCF    03.5
01D0:  BSF    08.7
....................    delay_us(550 + 1000); 
01D1:  MOVLW  01
01D2:  MOVWF  26
01D3:  CALL   011
01D4:  MOVLW  05
01D5:  MOVWF  21
01D6:  MOVLW  6D
01D7:  MOVWF  22
01D8:  CALL   1BE
01D9:  DECFSZ 21,F
01DA:  GOTO   1D6
....................    output_low(SERVO_PIN); 
01DB:  BSF    03.5
01DC:  BCF    08.7
01DD:  BCF    03.5
01DE:  BCF    08.7
....................    delay_us(19450 - 1000); 
01DF:  MOVLW  12
01E0:  MOVWF  26
01E1:  CALL   011
01E2:  MOVLW  02
01E3:  MOVWF  21
01E4:  MOVLW  E0
01E5:  MOVWF  22
01E6:  CALL   1BE
01E7:  DECFSZ 21,F
01E8:  GOTO   1E4
01E9:  RETURN
.................... } 
....................  
....................  
....................  
.................... void main() 
*
0209:  MOVF   03,W
020A:  ANDLW  1F
020B:  MOVWF  03
020C:  MOVLW  FF
020D:  MOVWF  20
020E:  BSF    03.5
020F:  BSF    1F.0
0210:  BSF    1F.1
0211:  BSF    1F.2
0212:  BCF    1F.3
0213:  MOVLW  07
0214:  MOVWF  1C
0215:  BCF    03.7
.................... {   
....................    set_tris_b(0b00000000); 
0216:  MOVLW  00
0217:  MOVWF  06
....................    output_b(0x00); 
0218:  CLRF   06
0219:  BCF    03.5
021A:  CLRF   06
....................     
....................    set_tris_d(0b10000000); 
021B:  MOVLW  80
021C:  BSF    03.5
021D:  MOVWF  08
....................    output_d(0x00); 
021E:  CLRF   08
021F:  BCF    03.5
0220:  CLRF   08
....................     
....................    set_tris_c(0b000010010); 
0221:  MOVLW  12
0222:  BSF    03.5
0223:  MOVWF  07
0224:  BCF    03.5
0225:  MOVWF  20
....................    output_c(0x00); 
0226:  MOVLW  00
0227:  MOVWF  20
0228:  BSF    03.5
0229:  CLRF   07
022A:  BCF    03.5
022B:  CLRF   07
....................     
....................    lcd_init(); 
022C:  GOTO   0E4
....................    lcd_putc( "Closed!" ); 
022D:  MOVLW  04
022E:  BSF    03.6
022F:  MOVWF  0D
0230:  MOVLW  00
0231:  MOVWF  0F
0232:  BCF    03.6
0233:  CALL   168
....................    output_high( RED_LED ); 
0234:  BSF    03.5
0235:  BCF    08.1
0236:  BCF    03.5
0237:  BSF    08.1
....................    Servo_Low(); 
0238:  CALL   1CD
....................   
....................  while(TRUE) 
....................  { 
....................   
....................   if( input( SENSOR_1 ) == 0 ) 
0239:  BSF    20.1
023A:  MOVF   20,W
023B:  BSF    03.5
023C:  MOVWF  07
023D:  BCF    03.5
023E:  BTFSC  07.1
023F:  GOTO   257
....................   { 
....................    delay_us(20); 
0240:  MOVLW  20
0241:  MOVWF  77
0242:  DECFSZ 77,F
0243:  GOTO   242
0244:  GOTO   245
0245:  NOP
....................    servo_high(); 
0246:  GOTO   1EA
....................    output_high( GREEN_LED ); 
0247:  BSF    03.5
0248:  BCF    08.0
0249:  BCF    03.5
024A:  BSF    08.0
....................    output_low( RED_LED ); 
024B:  BSF    03.5
024C:  BCF    08.1
024D:  BCF    03.5
024E:  BCF    08.1
....................    lcd_putc( "\fOpen!" ); 
024F:  MOVLW  08
0250:  BSF    03.6
0251:  MOVWF  0D
0252:  MOVLW  00
0253:  MOVWF  0F
0254:  BCF    03.6
0255:  CALL   168
....................   } 
0256:  GOTO   274
....................   else if ( input( SENSOR_2 ) == 0 ) 
0257:  BSF    20.4
0258:  MOVF   20,W
0259:  BSF    03.5
025A:  MOVWF  07
025B:  BCF    03.5
025C:  BTFSC  07.4
025D:  GOTO   274
....................   { 
....................    delay_us(20); 
025E:  MOVLW  20
025F:  MOVWF  77
0260:  DECFSZ 77,F
0261:  GOTO   260
0262:  GOTO   263
0263:  NOP
....................    Servo_Low(); 
0264:  CALL   1CD
....................    output_low( GREEN_LED ); 
0265:  BSF    03.5
0266:  BCF    08.0
0267:  BCF    03.5
0268:  BCF    08.0
....................    output_high( RED_LED ); 
0269:  BSF    03.5
026A:  BCF    08.1
026B:  BCF    03.5
026C:  BSF    08.1
....................    lcd_putc( "\fClosed!" ); 
026D:  MOVLW  0C
026E:  BSF    03.6
026F:  MOVWF  0D
0270:  MOVLW  00
0271:  MOVWF  0F
0272:  BCF    03.6
0273:  CALL   168
....................   } 
0274:  GOTO   239
....................  
....................  }  
.................... } 
0275:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
